#!/bin/bash

# parse arguments
while getopts "hft:i:s:" opt; do
    case "$opt" in
    h)
        echo "usage:"
        echo "  -h:          Help"
        echo "  -f:          Force overwrite of build if existing"
        echo "  -t target:   Build target â€“ one of (dev|appstore|installer|zip)"
        echo "  -i identity: Developer or team name and id (in quotes)"
        echo "               e.g. 'TEAM NAME (XXXXXXXXXX)' or 'YOUR NAME (XXXXXXXXXX)'"
        echo "  -s signmode: Codesign with --deep? One of (deep|shallow)"
        echo
        exit 0
        ;;
    f)
        FORCE_OVERWRITE=1
        ;;
    t)
        BUILD_FOR=$OPTARG
        ;;
    i)
        DEVNAME=$OPTARG
        ;;
    s)
        SIGN_MODE=$OPTARG
        ;;
    esac
done


DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$DIR"

appfile=`find "../1_MyBuild" -name "*.app" -exec basename {} \;`
appDir=`find "../1_MyBuild" -name "*.app" -print`
appName="${appfile%.*}"
APPSTORE_DEV_ProfileDir=`find "../0_BeforeYouBuild/ProvisioningProfiles/Development" -name "*.provisionprofile" -print`
APPSTORE_DIST_ProfileDir=`find "../0_BeforeYouBuild/ProvisioningProfiles/Appstore" -name "*.provisionprofile" -print`
DEV_ID_ProfileDir=`find "../0_BeforeYouBuild/ProvisioningProfiles/Developer" -name "*.provisionprofile" -print`

echo "+------------------------------------------------------------------+"
echo "|                      Signing and Packaging                       |"
echo "+------------------------------------------------------------------+"

chmod -R a+xr "$appDir"

#################################################################################################
######################## GET VERSION ###########################################################
################################################################################################

LineBundleVersion=$(sed -n '/CFBundleShortVersionString/=' "../4_InfoPlist/Info.plist")
LineBundleVersion="$(($LineBundleVersion + 1))"
BundleVersion=$( sed "${LineBundleVersion}q;d" "../4_InfoPlist/Info.plist" | tr -d '\040\011\012\015')

LineBundleBuild=$(sed -n '/CFBundleVersion/=' "../4_InfoPlist/Info.plist")
LineBundleBuild="$(($LineBundleBuild + 1))"
BundleBuild=$( sed "${LineBundleBuild}q;d" "../4_InfoPlist/Info.plist" | tr -d '\040\011\012\015')

VarRemove_1="<string>"
VarRemove_2="</string>"

BundleVersion="${BundleVersion//$VarRemove_1/}"
BundleVersion="${BundleVersion//$VarRemove_2/}"

BundleBuild="${BundleBuild//$VarRemove_1/}"
BundleBuild="${BundleBuild//$VarRemove_2/}"

FolderVersionName=""

printf "\nReading version and build from your Info.Plist\nVersion : $BundleVersion\nBuild : $BundleBuild \n"

if [ "$BundleVersion" = "$BundleBuild" ]; then
    echo "Info : Version and build use the same value"
    FolderVersionName="$BundleVersion"
    echo "Final build folder name will be $FolderVersionName"
    
else
    echo "Info : Version and build use the different values"
    FolderVersionName="$BundleVersion""b$BundleBuild"
    echo "Final build folder name will be $FolderVersionName"
fi

printf "\n\nMake sure you always update your build number / version number when uploading new packages to the AppStore... \n\n"

AppFolder="../7_Distribution/$appName"
if [ ! -d "$AppFolder" ]; then
  mkdir "$AppFolder"
fi

pathCurrentBuild="$AppFolder/$FolderVersionName"

if [ ! -d "$pathCurrentBuild" ]; then
  mkdir "$pathCurrentBuild"
fi

pathDevelopment="$pathCurrentBuild/Development"
pathInstaller="$pathCurrentBuild/Installer"
pathZip="$pathCurrentBuild/Zip"
pathAppstore="$pathCurrentBuild/Appstore"

#################################################################################################
######################## PROMPT - PROVISIONING PROFILE - MK FOLDER ##############################
################################################################################################

if [ -z "$BUILD_FOR" ]; then
    printf "\e[1mCreate a build for Appstore Develompent (Testing), Appstore Distribution or Distribution outside the Appstore ?\e[0m"
    printf "\nEnter without quotes : 'dev', 'appstore', 'installer' or 'zip' \e[1m \n"
    read -r BUILD_FOR
fi

while true
do
    if [ "$BUILD_FOR" = "dev" ]; then
        if [ -z "$APPSTORE_DEV_ProfileDir" ]; then
            printf "\n\e[1mERROR! No .provisionprofile found! \n Place correct .provisionprofile in '0_BeforeYouBuild/ProvisioningProfiles/Development/' folder \n \e[0m"
            exit 0
        fi
        printf "\nCopying development profile as 'embedded.provisionprofile'\n\e[0mfrom $APPSTORE_DEV_ProfileDir \nto $appDir/Contents/"
        cp -R "$APPSTORE_DEV_ProfileDir" "$appDir/Contents/embedded.provisionprofile"
        printf "\e[0m\n\nCreating development build\n"
        if [ ! -d "$pathDevelopment" ]; then
          mkdir "$pathDevelopment"
        fi
        activePath="$pathDevelopment"
        break

    elif [ "$BUILD_FOR" = "installer" ]; then
        if [ -z "$DEV_ID_ProfileDir" ]; then
            printf "\n\e[1mERROR! No .provisionprofile found! \n Place correct .provisionprofile in '0_BeforeYouBuild/ProvisioningProfiles/Developer/' folder \n \e[0m" 
            exit 0
        fi
        printf "\nCopying distribution profile as 'embedded.provisionprofile'\n\e[0mfrom $DEV_ID_ProfileDir \nto $appDir/Contents/"
        cp -R "$DEV_ID_ProfileDir" "$appDir/Contents/embedded.provisionprofile" 
        printf "\e[0m\n\nCreating Installer (Distribution outside Appstore)\n"
        if [ ! -d "$pathInstaller" ]; then
          mkdir "$pathInstaller"
        fi
        activePath="$pathInstaller"
        break
      
    elif [ "$BUILD_FOR" = "zip" ]; then
        echo " "
        if [ -z "$DEV_ID_ProfileDir" ]; then
            printf "\n\e[1mERROR! No .provisionprofile found! \n Place correct .provisionprofile in '0_BeforeYouBuild/ProvisioningProfiles/Developer/' folder \n \e[0m" 
            exit 0
        fi
        printf "Place Provisioning Profile in ZIP? (y/n) \e[0m"
        while read -r PlaceProvisioningProfile
        do
            if [ "$PlaceProvisioningProfile" = "y" ]; then

                printf "\nCopying distribution profile as 'embedded.provisionprofile'\n\e[0mfrom $DEV_ID_ProfileDir \nto $appDir/Contents/"
                cp -R "$DEV_ID_ProfileDir" "$appDir/Contents/embedded.provisionprofile" 
                break

            elif [ "$PlaceProvisioningProfile" = "n" ]; then

                printf "\nNo provisioning profile in Zip\n"
                break
                
            else
                echo "Wrong input"
            fi
        done        
        printf "\e[0m\n\nCreating Zip (Distribution outside Appstore)\n"
        if [ ! -d "$pathZip" ]; then
          mkdir "$pathZip"
        fi
        activePath="$pathZip"
        break
        
    elif [ "$BUILD_FOR" = "appstore" ]; then
        echo " "
        if [ -z "$APPSTORE_DIST_ProfileDir" ]; then
            printf "\n\e[1mERROR! No .provisionprofile found! \n Place correct .provisionprofile in '0_BeforeYouBuild/ProvisioningProfiles/Appstore/' folder \n \e[0m" 
            exit 0
        fi

        if [ ! -d "$pathAppstore" ]; then
          mkdir "$pathAppstore"          
        fi   
        activePath="$pathAppstore"
        printf "\nCopying distribution profile as 'embedded.provisionprofile'\n\e[0mfrom $APPSTORE_DIST_ProfileDir \nto $appDir/Contents/"
        cp -R "$APPSTORE_DIST_ProfileDir" "$appDir/Contents/embedded.provisionprofile"        
        printf "\e[0m\n\nCreating Appstore build\n"
        break

    else
        echo "Wrong input"
        read -r BUILD_FOR
    fi
done

#################################################################################################
######################## REPLACE? ##############################################################
################################################################################################

isEmpty=`find "$activePath" -name "*$appName.*" -maxdepth 1 -print`

if ! [ -z "$isEmpty" ]; then
  printf "\n\e[1m\nFile found in destination! ( $activePath )\n\e[0m"
  if [ "$FORCE_OVERWRITE" = 1 ]; then
      Replace="y"
  else
      echo "Overwrite? (y/n)"
      read -r Replace
  fi
  
  while true
  do
      if [ "$Replace" = "y" ]; then
          printf "Removing old build\n"
          rm -rf "$activePath/"*
          break

      elif [ "$Replace" = "n" ]; then
          printf "\n\nExiting..."
          exit 0
          break
      else
          echo "Wrong input"
          read -r Replace
      fi
  done
fi

#################################################################################################
######################## ENTITLEMENTS ##########################################################
################################################################################################
printf "\n\n ENTITLEMENTS \n"

if [ "$BUILD_FOR" = "dev" ]; then

      locationEntitlements=`find "../5_Entitlements/Development" -name "*.entitlements" -maxdepth 1`
else 
      locationEntitlements=`find "../5_Entitlements/Distribution" -name "*.entitlements" -maxdepth 1`
fi

if [ -z "$locationEntitlements" ]; then

    printf "\e[1mERROR! No entitlements.plist found! Note that entitlements.plist is case sensitive so the your entitlements file needs exactly that name"
    echo "Place entitlements.plist in '5_Entitlements/' folder \n \e[0m"     
    exit 0
fi

printf "Entitlements taken from $locationEntitlements\n\n"

#################################################################################################
######################## TEAM ID ###############################################################
################################################################################################

if [ ! -z "$DEVNAME" ] ; then
    echo "Using identity [$DEVNAME]"

elif [ "$BUILD_FOR" = "dev" ] ; then
    
    printf "\nDeveloper name and id? \n\e[0mExample format, without quotes:'JOHN THE BLANKER (FKJLDLKFDG)' \n\e[1m "
    read DEVNAME
    printf "\e[0m \n Developer Name: [$DEVNAME]"

  else
    printf "\nTeam name and id? \n\e[0mExample format, without quotes:'MYCOMPANY (FKJLDLKFDG)' \n\e[1m "
    read DEVNAME
    printf "\e[0m \n Team Name: [$DEVNAME] \n"
fi


#################################################################################################
######################## SIGNING ###############################################################
################################################################################################

printf "\n\n Signing  \n-------------------------------------------------------------------\n\n"

if  [ "$BUILD_FOR" = "appstore" ] ; then 
    signature="3rd Party Mac Developer Application: $DEVNAME"
elif [ "$BUILD_FOR" = "dev" ] ; then
    signature="Mac Developer: $DEVNAME"
elif [ "$BUILD_FOR" = "installer" ] ; then
    signature="Developer ID Application: $DEVNAME"
elif [ "$BUILD_FOR" = "zip" ] ; then
    signature="Developer ID Application: $DEVNAME"
fi
 
printf "\n\nBUNDLES & DYLIBS\n"  

if [ "$BUILD_FOR" = "dev" ] || [ "$BUILD_FOR" = "appstore" ]; then
  
  find "$appDir/Contents/Plugins" -name "*.bundle" -print0 | 
  while IFS= read -r -d '' bundle; do
      codesign --entitlements "$locationEntitlements" --deep --force --verbose=4 --display --sign "$signature" "$bundle"
  done

  find "$appDir/Contents/Plugins" -name "*.so" -print0 | 
  while IFS= read -r -d '' bundle; do
      codesign --entitlements "$locationEntitlements" --deep --force --verbose=4 --display --sign "$signature" "$bundle"
  done

  find "$appDir/Contents/Frameworks" -name "*.dylib" -print0 | 
  while IFS= read -r -d '' dylibs; do
      codesign --entitlements "$locationEntitlements" --deep --force --verbose=4 --display --sign "$signature" "$dylibs"
  done
 
  printf "\n SIGN APP\n" 
  codesign --entitlements "$locationEntitlements" --force --verbose=4 --display --sign "$signature" "$appDir"

else 

  find "$appDir/Contents/Plugins" -name "*.bundle" -print0 | 
  while IFS= read -r -d '' bundle; do
      codesign --deep --force --verbose=4 --display --timestamp --options=runtime --sign "$signature" "$bundle"
  done

  find "$appDir/Contents/Plugins" -name "*.so" -print0 | 
  while IFS= read -r -d '' bundle; do
      codesign --deep --force --verbose=4 --display --timestamp --options=runtime --sign "$signature" "$bundle"
  done

  find "$appDir/Contents/Frameworks" -name "*.dylib" -print0 | 
  while IFS= read -r -d '' dylibs; do
      codesign --deep --force --verbose=4 --display --timestamp --options=runtime --sign "$signature" "$dylibs"
  done
  
fi

printf "\n SIGN APP\n" 
if [ "$SIGN_MODE" = "deep" ]; then
    DeepSign="y"
elif [ "$SIGN_MODE" = "shallow" ]; then
    DeepSign="n"
else
    printf "\n Codesign with --deep (no preserves metadata on bundles & dylibs)? (y/n) \n"
    read -r DeepSign
fi

while true
do
    if [ "$DeepSign" = "y" ]; then
        echo "Signing with --deep"
        if [ "$BUILD_FOR" = "dev" ] || [ "$BUILD_FOR" = "appstore" ]; then
          codesign --entitlements "$locationEntitlements" --deep --force --verbose=4 --display --sign "$signature" "$appDir"
        else
          codesign --entitlements "$locationEntitlements" --deep --force --verbose=4 --display  --timestamp --options=runtime --sign "$signature" "$appDir"
        fi
        break
    elif [ "$DeepSign" = "n" ]; then
        if [ "$BUILD_FOR" = "dev" ] || [ "$BUILD_FOR" = "appstore" ]; then
          codesign --entitlements "$locationEntitlements" --force --verbose=4 --display --sign "$signature" "$appDir"
        else
          codesign --entitlements "$locationEntitlements" --force --verbose=4 --display  --timestamp --options=runtime --sign "$signature" "$appDir"
        fi
        break
    else
        echo "Wrong input"
        read -r DeepSign
    fi
done

#################################################################################################
########################  VERIFY  ##############################################################
################################################################################################

printf "\n\n Veryfing codesign \n ------------------------------------------------------------------- \n"
codesign --verify --verbose "$appDir"
echo " "
codesign -dv --verbose=4 "$appDir"

#################################################################################################
########################  PRODUCT BUILD  #######################################################
################################################################################################

printf "\n\nBuilding Package ... \n------------------------------------------------------------------- \n"

if [ "$BUILD_FOR" = "dev" ]; then
  productbuild --component "$appDir" "/Applications" --sign "3rd Party Mac Developer Installer:" "$appName.pkg"
  mv "$appName.pkg" "$activePath"
  cp -r "$appDir" "$activePath"
  
  printf "\n\n\n Testing build in ../7_Distribution/$FolderVersionName/Development\n"
  printf "\n\n\n Testing PKG in ../7_Distribution/$FolderVersionName/Development\n"

elif [ "$BUILD_FOR" = "zip" ]; then    
    # cd $appDir
    cd "$appDir"
    cd ..
    zip -r "$activePath/$appName.zip" "$appfile"
    printf "\n\n\n Zip ready to go in  in ../7_Distribution/$FolderVersionName/Zip"         

elif [ "$BUILD_FOR" = "installer" ]; then  
    printf "\n \e[0mBuilding installer pkg : \n$activePath/$appName.pkg\n"     
    productbuild --component "$appDir" "/Applications" --sign "Developer ID Installer: $DEVNAME" "$appName.pkg"
    mv "$appName.pkg" "$activePath"
else
  printf "\n \e[0mCreating Appstore build pkg : \n$activePath/$appName.pkg\n"
  productbuild --component "$appDir" "/Applications" --sign "3rd Party Mac Developer Installer: $DEVNAME" "$appName.pkg"
  mv "$appName.pkg" "$activePath"
fi

if ! [ "$BUILD_FOR" = "zip" ]; then
  printf "\n\n VERIFY PKG \n ------------------------------------------------------------------- \n"
  pkgutil --check-signature "$activePath/$appName.pkg"
fi

printf "\n\n\n\n Remember to delete old builds before installing a .pkg It will write over any other build it finds \n --------------------------------------------------------------------------------------------- \n"

exit 0
